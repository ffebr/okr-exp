openapi: 3.0.0
info:
  title: OKR Express API
  version: 1.0.0
  description: API for managing OKRs, companies, and teams

servers:
  - url: http://localhost:3000
    description: Development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        email:
          type: string
        companies:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              name:
                type: string
        roles:
          type: array
          items:
            type: object
            properties:
              company:
                type: object
                properties:
                  _id:
                    type: string
                  name:
                    type: string
              role:
                type: string

    Team:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        companyId:
          type: string
        members:
          type: array
          items:
            type: object
            properties:
              userId:
                type: string
        requiredRoles:
          type: array
          items:
            type: string

    Company:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        createdBy:
          type: string
        roles:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              description:
                type: string

    OKR:
      type: object
      properties:
        _id:
          type: string
        team:
          type: string
        createdBy:
          type: string
        objective:
          type: string
        description:
          type: string
        keyResults:
          type: array
          items:
            type: object
            properties:
              title:
                type: string
              description:
                type: string
              progress:
                type: number
        progress:
          type: number
        status:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string

    CheckIn:
      type: object
      properties:
        _id:
          type: string
        okr:
          type: string
        user:
          type: string
        comment:
          type: string
        updates:
          type: array
          items:
            type: object
            properties:
              index:
                type: number
              previousProgress:
                type: number
              newProgress:
                type: number
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

paths:
  /api/auth/register:
    post:
      summary: Register a new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 6
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
        '409':
          description: Email already exists

  /api/auth/login:
    post:
      summary: Login user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials
        '404':
          description: User not found

  /api/users/{userId}:
    get:
      summary: Get user details
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User details including companies and roles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '404':
          description: User not found

  /api/companies:
    post:
      summary: Create a new company
      tags: [Companies]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
      responses:
        '201':
          description: Company created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  company:
                    $ref: '#/components/schemas/Company'
        '401':
          description: Unauthorized

    get:
      summary: Get all companies related to user
      tags: [Companies]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of companies with user roles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Company'
        '401':
          description: Unauthorized

  /api/companies/{companyId}:
    get:
      summary: Get detailed company information including roles and users
      tags: [Companies]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: companyId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Detailed company information
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  createdBy:
                    type: string
                  roles:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        description:
                          type: string
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        email:
                          type: string
                        roles:
                          type: array
                          items:
                            type: string
                  createdAt:
                    type: string
                    format: date-time
                  updatedAt:
                    type: string
                    format: date-time
        '401':
          description: Unauthorized
        '404':
          description: Company not found

  /api/companies/{companyId}/roles:
    post:
      summary: Add a new role to company
      tags: [Companies]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: companyId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        '201':
          description: Role added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  company:
                    $ref: '#/components/schemas/Company'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Only company creator can add roles
        '404':
          description: Company not found
        '400':
          description: Role with this name already exists

    get:
      summary: Get all roles in company
      tags: [Companies]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: companyId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of roles in company
          content:
            application/json:
              schema:
                type: object
                properties:
                  roles:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        description:
                          type: string
        '401':
          description: Unauthorized
        '404':
          description: Company not found

  /api/companies/{companyId}/users:
    post:
      summary: Add user to company
      tags: [Companies]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: companyId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
      responses:
        '201':
          description: User added to company successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Only company creator can add users
        '404':
          description: Company not found or User not found
        '400':
          description: User is already in this company

    get:
      summary: Get all users in company
      tags: [Companies]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: companyId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of users in company
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        name:
                          type: string
                        email:
                          type: string
                        roles:
                          type: array
                          items:
                            type: string
        '401':
          description: Unauthorized
        '404':
          description: Company not found

  /api/companies/{companyId}/users/{userId}/roles:
    post:
      summary: Assign role to user in company
      tags: [Companies]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: companyId
          required: true
          schema:
            type: string
        - in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - role
              properties:
                role:
                  type: string
      responses:
        '201':
          description: Role assigned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Only company creator can assign roles
        '404':
          description: Company not found or User not found
        '400':
          description: Invalid role for this company or User already has this role

  /api/companies/{companyId}/users/{userId}/roles/{role}:
    delete:
      summary: Remove role from user in company
      tags: [Companies]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: companyId
          required: true
          schema:
            type: string
        - in: path
          name: userId
          required: true
          schema:
            type: string
        - in: path
          name: role
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Role removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Only company creator can remove roles
        '404':
          description: Company not found or User not found
        '400':
          description: User doesn't have this role in the company

  /api/companies/{companyId}/roles/{role}:
    delete:
      summary: Remove role from company and revoke it from all users
      tags: [Companies]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: companyId
          required: true
          schema:
            type: string
        - in: path
          name: role
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Role removed successfully and revoked from all users
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  affectedUsers:
                    type: number
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Only company creator can remove roles
        '404':
          description: Company not found or Role not found in company

  /api/companies/{companyId}/users/{userId}:
    delete:
      summary: Remove user from company
      tags: [Companies]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: companyId
          required: true
          schema:
            type: string
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User removed from company successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Only company creator can remove users
        '404':
          description: Company not found or User not found
        '400':
          description: User is not in this company

  /api/teams:
    post:
      summary: Create a new team
      tags: [Teams]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - companyId
              properties:
                name:
                  type: string
                companyId:
                  type: string
                description:
                  type: string
      responses:
        '201':
          description: Team created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  team:
                    $ref: '#/components/schemas/Team'
        '401':
          description: Unauthorized
        '404':
          description: Company not found
        '400':
          description: Invalid input data

    get:
      summary: Get all teams
      tags: [Teams]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: companyId
          required: true
          schema:
            type: string
          description: ID of the company to get teams from
      responses:
        '200':
          description: List of teams
          content:
            application/json:
              schema:
                type: object
                properties:
                  teams:
                    type: array
                    items:
                      $ref: '#/components/schemas/Team'
        '401':
          description: Unauthorized
        '400':
          description: Company ID is required
        '404':
          description: Company not found

  /api/teams/{teamId}:
    get:
      summary: Get team details
      tags: [Teams]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: teamId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Team details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '401':
          description: Unauthorized
        '404':
          description: Team not found

    delete:
      summary: Delete team
      tags: [Teams]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: teamId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Team deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  team:
                    $ref: '#/components/schemas/Team'
        '401':
          description: Unauthorized
        '404':
          description: Team not found

  /api/teams/{teamId}/members:
    get:
      summary: Get team members
      tags: [Teams]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: teamId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of team members
          content:
            application/json:
              schema:
                type: object
                properties:
                  members:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '404':
          description: Team not found

  /api/teams/{teamId}/users:
    post:
      summary: Add user to team
      tags: [Teams]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: teamId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
      responses:
        '201':
          description: User added to team successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  team:
                    $ref: '#/components/schemas/Team'
        '401':
          description: Unauthorized
        '404':
          description: Team not found or User not found
        '400':
          description: User is already in this team or does not have required roles

  /api/teams/{teamId}/users/{userId}:
    delete:
      summary: Remove user from team
      tags: [Teams]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: teamId
          required: true
          schema:
            type: string
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User removed from team successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  team:
                    $ref: '#/components/schemas/Team'
        '401':
          description: Unauthorized
        '404':
          description: Team not found
        '400':
          description: User is not in this team

  /api/teams/{teamId}/roles:
    post:
      summary: Add required role to team
      tags: [Teams]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: teamId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - roleName
              properties:
                roleName:
                  type: string
      responses:
        '201':
          description: Role added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  team:
                    $ref: '#/components/schemas/Team'
        '401':
          description: Unauthorized
        '404':
          description: Team not found or Role not found in company
        '400':
          description: Role is already required for this team

  /api/teams/{teamId}/roles/{roleName}:
    delete:
      summary: Remove required role from team
      tags: [Teams]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: teamId
          required: true
          schema:
            type: string
        - in: path
          name: roleName
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Role removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  team:
                    $ref: '#/components/schemas/Team'
        '401':
          description: Unauthorized
        '404':
          description: Team not found
        '400':
          description: Role is not required for this team

  /api/teams/{teamId}/roles/bulk:
    post:
      summary: Add multiple required roles to team
      tags: [Teams]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: teamId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - roles
              properties:
                roles:
                  type: array
                  items:
                    type: string
                  description: Array of role names to add
      responses:
        '201':
          description: Roles added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  team:
                    $ref: '#/components/schemas/Team'
        '400':
          description: Invalid roles or all roles already required
        '401':
          description: Unauthorized
        '404':
          description: Team not found or Company not found

  /api/teams/{teamId}/users/bulk:
    post:
      summary: Add multiple users to team
      tags: [Teams]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: teamId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userIds
              properties:
                userIds:
                  type: array
                  items:
                    type: string
                  description: Array of user IDs to add
      responses:
        '201':
          description: Users added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  team:
                    $ref: '#/components/schemas/Team'
        '400':
          description: Invalid user IDs or all users already in team
        '401':
          description: Unauthorized
        '404':
          description: Team not found or some users not found

  /api/teams/{teamId}/okrs:
    post:
      summary: Create OKR in team
      tags: [OKRs]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: teamId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objective
              properties:
                objective:
                  type: string
                description:
                  type: string
                keyResults:
                  type: array
                  items:
                    type: object
                    properties:
                      title:
                        type: string
                      description:
                        type: string
      responses:
        '201':
          description: OKR created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  okr:
                    $ref: '#/components/schemas/OKR'
        '401':
          description: Unauthorized
        '404':
          description: Team not found
        '403':
          description: User does not have access to this team

    get:
      summary: Get all OKRs in team
      tags: [OKRs]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: teamId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of OKRs in team
          content:
            application/json:
              schema:
                type: object
                properties:
                  okrs:
                    type: array
                    items:
                      $ref: '#/components/schemas/OKR'
        '401':
          description: Unauthorized
        '404':
          description: Team not found
        '403':
          description: User does not have access to this team

  /api/okrs/{okrId}/key-results:
    post:
      summary: Add key result to OKR
      tags: [OKRs]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: okrId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
              properties:
                title:
                  type: string
                description:
                  type: string
      responses:
        '201':
          description: Key result added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  okr:
                    $ref: '#/components/schemas/OKR'
        '401':
          description: Unauthorized
        '404':
          description: OKR not found
        '403':
          description: User does not have permission to manage this OKR

  /api/check-ins:
    post:
      summary: Create a new check-in for an OKR
      tags: [Check-ins]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - okrId
                - updates
              properties:
                okrId:
                  type: string
                updates:
                  type: array
                  items:
                    type: object
                    required:
                      - index
                      - newProgress
                    properties:
                      index:
                        type: number
                        description: Index of the key result to update
                      newProgress:
                        type: number
                        minimum: 0
                        maximum: 100
                        description: New progress value (0-100)
                comment:
                  type: string
                  description: Optional comment about the check-in
      responses:
        '201':
          description: Check-in created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckIn'
        '400':
          description: Invalid key result index or progress value
        '401':
          description: Unauthorized
        '403':
          description: User does not have access to this OKR
        '404':
          description: OKR not found

  /api/check-ins/{okrId}:
    get:
      summary: Get all check-ins for an OKR
      tags: [Check-ins]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: okrId
          required: true
          schema:
            type: string
          description: ID of the OKR
      responses:
        '200':
          description: List of check-ins
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CheckIn'
        '401':
          description: Unauthorized
        '403':
          description: User does not have access to this OKR
        '404':
          description: OKR not found

  /api/teams/{teamId}/roles:
    post:
      summary: Add a single required role to team
      tags: [Teams]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: teamId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - roleName
              properties:
                roleName:
                  type: string
                  description: Name of the role to add
      responses:
        '201':
          description: Role added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  team:
                    $ref: '#/components/schemas/Team'
        '400':
          description: Role is already required for this team
        '401':
          description: Unauthorized
        '404':
          description: Team not found or Role not found in company

  /api/teams/{teamId}/users:
    post:
      summary: Add a single user to team
      tags: [Teams]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: teamId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  description: ID of the user to add
      responses:
        '201':
          description: User added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  team:
                    $ref: '#/components/schemas/Team'
        '400':
          description: User is already in team or does not have required roles
        '401':
          description: Unauthorized
        '404':
          description: Team not found or User not found

  /api/teams/{teamId}/roles/bulk:
    post:
      summary: Add multiple required roles to team (bulk operation)
      tags: [Teams]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: teamId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - roles
              properties:
                roles:
                  type: array
                  items:
                    type: string
                  description: Array of role names to add (use /roles endpoint for single role)
      responses:
        '201':
          description: Roles added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  team:
                    $ref: '#/components/schemas/Team'
        '400':
          description: Invalid roles or all roles already required
        '401':
          description: Unauthorized
        '404':
          description: Team not found or Company not found

  /api/teams/{teamId}/users/bulk:
    post:
      summary: Add multiple users to team (bulk operation)
      tags: [Teams]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: teamId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userIds
              properties:
                userIds:
                  type: array
                  items:
                    type: string
                  description: Array of user IDs to add (use /users endpoint for single user)
      responses:
        '201':
          description: Users added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  team:
                    $ref: '#/components/schemas/Team'
        '400':
          description: Invalid users or all users already in team
        '401':
          description: Unauthorized
        '404':
          description: Team not found or some users not found 